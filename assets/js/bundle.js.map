{
  "version": 3,
  "sources": ["form-scripts/ui.js", "form-scripts/validators.js", "form-scripts/core.js", "form-scripts/integrations.js", "main.js"],
  "sourcesContent": ["/**\n * Form UI Module\n * Handles UI components and interactions\n */\n\n// Initialize UI components\nexport function initUI() {\n  // Create modal if it doesn't exist\n  createModal();\n}\n\n// Create and append modal to body if it doesn't exist\nfunction createModal() {\n  if (!document.getElementById(\"validationModal\")) {\n    const modalHtml = `<div id=\"validationModal\" class=\"modal\"><div class=\"modal-content\"><h4 id=\"modalTitle\">Validation Error</h4><p id=\"modalMessage\"></p><button class=\"btn btn-primary\" onclick=\"closeModal()\">Close</button></div></div>`;\n\n    // Add modal styles\n    const styleSheet = document.createElement(\"style\");\n    styleSheet.textContent = `.modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.4); } .modal.show { display: block; } .modal-content { background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 500px; }`;\n    document.head.appendChild(styleSheet);\n\n    // Add modal to body\n    const modalDiv = document.createElement(\"div\");\n    modalDiv.innerHTML = modalHtml;\n    document.body.appendChild(modalDiv.firstElementChild);\n  }\n}\n\n// Show modal with message\nexport function showModal(title, message) {\n  const modal = document.getElementById(\"validationModal\");\n  const modalTitle = document.getElementById(\"modalTitle\");\n  const modalMessage = document.getElementById(\"modalMessage\");\n  \n  if (modal && modalMessage) {\n    modalTitle.textContent = title || \"Notification\";\n    modalMessage.textContent = message;\n    modal.classList.add(\"show\");\n  }\n}\n\n// Close modal function (exposed to window for the onclick handler)\nexport function closeModal() {\n  const modal = document.getElementById(\"validationModal\");\n  if (modal) {\n    modal.classList.remove(\"show\");\n  }\n}\n\n// Expose closeModal to window for the onclick handler\nwindow.closeModal = closeModal;\n", "/**\n * Form Validators Module\n * Contains validation logic for form fields\n */\n\n// Import UI components for displaying validation errors\nimport { showModal } from \"./ui.js\";\n\n// ZIP/Postal Code Validator Class\nexport class ZipCodeValidator {\n  constructor() {\n    this.usBaseUrl = \"https://api.zippopotam.us/us/\";\n    this.caBaseUrl = \"https://api.zippopotam.us/ca/\";\n    this.cache = new Map();\n  }\n\n  isUSZipCode(code) {\n    return /^\\d{5}(-\\d{4})?$/.test(code);\n  }\n\n  isCanadianPostalCode(code) {\n    return /^[A-Za-z]\\d[A-Za-z][ -]?\\d[A-Za-z]\\d$/.test(code);\n  }\n\n  formatCanadianPostalCode(code) {\n    // Remove any spaces or hyphens and convert to uppercase\n    return code\n      .replace(/[\\s-]/g, \"\")\n      .toUpperCase()\n      .replace(/(.{3})(.{3})/, \"$1 $2\");\n  }\n\n  async validate(code) {\n    // Clean up the input\n    code = code.trim();\n\n    // Check if it's a US ZIP code\n    if (this.isUSZipCode(code)) {\n      const baseZip = code.split(\"-\")[0].trim();\n\n      // Check cache\n      if (this.cache.has(baseZip)) {\n        return this.cache.get(baseZip);\n      }\n\n      try {\n        const response = await fetch(`${this.usBaseUrl}${baseZip}`);\n        if (!response.ok) {\n          throw new Error(\"Invalid ZIP code\");\n        }\n\n        const data = await response.json();\n        const result = {\n          valid: true,\n          city: data.places[0][\"place name\"],\n          state: data.places[0][\"state abbreviation\"],\n          country: \"United States\",\n        };\n\n        this.cache.set(baseZip, result);\n        return result;\n      } catch (error) {\n        return {\n          valid: false,\n          error: \"Please enter a valid US ZIP code (12345 or 12345-1234)\",\n        };\n      }\n    }\n\n    // Check if it's a Canadian postal code\n    if (this.isCanadianPostalCode(code)) {\n      const formattedCode = this.formatCanadianPostalCode(code);\n      const fsa = formattedCode.substring(0, 3);\n\n      // Check cache\n      if (this.cache.has(formattedCode)) {\n        return this.cache.get(formattedCode);\n      }\n\n      try {\n        const response = await fetch(`${this.caBaseUrl}${fsa}`);\n        if (!response.ok) {\n          throw new Error(\"Invalid postal code\");\n        }\n\n        const data = await response.json();\n        const result = {\n          valid: true,\n          city: data.places[0][\"place name\"],\n          state: data.places[0][\"state abbreviation\"],\n          country: \"Canada\",\n        };\n\n        this.cache.set(formattedCode, result);\n        return result;\n      } catch (error) {\n        return {\n          valid: false,\n          error: \"Please enter a valid Canadian postal code (A1A 1A1)\",\n        };\n      }\n    }\n\n    return {\n      valid: false,\n      error: \"Please enter a valid US ZIP code (12345 or 12345-1234) or Canadian postal code (A1A 1A1)\",\n    };\n  }\n}\n\n// Form field validators\nexport async function validateZipCode(zipCodeField) {\n  const zipValidator = new ZipCodeValidator();\n  const validationResult = await zipValidator.validate(zipCodeField.value);\n\n  if (!validationResult.valid) {\n    showModal(\"Validation Error\", validationResult.error);\n    return false;\n  }\n\n  return true;\n}\n\n// Export a function to validate all form fields\nexport async function validateAllFields(form) {\n  // Get zip code field - check for different naming variations\n  const zipCodeField = form.querySelector('[name=\"zipcode\"], [name=\"postal code\"], [name=\"zip code\"]');\n\n  if (zipCodeField) {\n    const isZipValid = await validateZipCode(zipCodeField);\n    if (!isZipValid) return false;\n  }\n\n  // Add more field validations as needed\n\n  return true;\n}\n", "/**\n * Form Core Module\n * Handles core form functionality and initialization\n */\n\n// Import validation from validators module\nimport { validateAllFields } from \"./validators.js\";\n\n// Form initialization function\nexport function initForm() {\n  const form = document.getElementById(\"SFMC_Form\");\n\n  if (form) {\n    console.log(\"Form initialized\");\n\n    // Set up form submission handler\n    form.addEventListener(\"submit\", handleFormSubmit);\n  }\n}\n\n// Form submission handler\nexport async function handleFormSubmit(e) {\n  e.preventDefault();\n\n  // Get form instance\n  const form = e.target;\n\n  // Validate form\n  const isValid = await validateForm(form);\n\n  if (isValid) {\n    // If validation passes, submit the form\n    form.submit();\n  }\n}\n\n// Form validation orchestrator\nexport async function validateForm(form) {\n  // Run all field validations\n  return await validateAllFields(form);\n}\n", "/**\r\n * Form Integrations Module\r\n * Handles third-party integrations like Cloudflare Turnstile\r\n */\r\n\r\n// Initialize Cloudflare Turnstile\r\nexport function initTurnstile() {\r\n  const form = document.getElementById(\"SFMC_Form\");\r\n\r\n  if (form) {\r\n    // Set the form action to the Turnstile handler\r\n    form.action = \"https://turnstile-handler.digitalmarketing-213.workers.dev\";\r\n\r\n    // Find the submit button\r\n    const submitButton = form.querySelector('button[type=\"submit\"]');\r\n\r\n    if (submitButton) {\r\n      // Create Turnstile element\r\n      const turnstileHTML = document.createElement(\"div\");\r\n      turnstileHTML.className = \"cf-turnstile\";\r\n      turnstileHTML.setAttribute(\"data-sitekey\", \"0x4AAAAAAA7xhXywyI0cvp43\");\r\n\r\n      // Insert before submit button\r\n      submitButton.parentNode.insertBefore(turnstileHTML, submitButton);\r\n    }\r\n  }\r\n\r\n  // Load Turnstile script\r\n  loadTurnstileScript();\r\n}\r\n\r\n// Load the Turnstile script\r\nfunction loadTurnstileScript() {\r\n  // Check if script is already loaded\r\n  if (document.querySelector('script[src*=\"turnstile/v0/api.js\"]')) {\r\n    return;\r\n  }\r\n\r\n  // Create and append script\r\n  const script = document.createElement(\"script\");\r\n  script.src = \"https://challenges.cloudflare.com/turnstile/v0/api.js\";\r\n  script.setAttribute(\"async\", \"\");\r\n  script.setAttribute(\"defer\", \"\");\r\n  document.head.appendChild(script);\r\n}\r\n\r\n/**\r\n * Extract UTM parameters from URL and add them to the form as hidden fields\r\n * Captures utm_source, utm_medium, utm_campaign, utm_term, utm_content, etc.\r\n */\r\nexport function extractUtmParams() {\r\n  const form = document.getElementById(\"SFMC_Form\");\r\n\r\n  if (!form) {\r\n    return;\r\n  }\r\n\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n\r\n  // Loop through all URL parameters\r\n  for (const [key, value] of urlParams.entries()) {\r\n    // Only process UTM parameters\r\n    if (key.startsWith(\"utm_\")) {\r\n      // Check if this UTM parameter already exists in the form\r\n      const existingInput = form.querySelector(`input[name=\"${key}\"]`);\r\n\r\n      if (existingInput) {\r\n        // Update existing field\r\n        existingInput.value = value;\r\n      } else {\r\n        // Create new hidden field\r\n        const input = document.createElement(\"input\");\r\n        input.type = \"hidden\";\r\n        input.name = key;\r\n        input.value = value;\r\n        form.appendChild(input);\r\n      }\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * Main Entry Point\r\n * Imports and initializes all form modules\r\n */\r\n\r\nimport { initForm } from \"./form-scripts/core.js\";\r\nimport { initUI } from \"./form-scripts/ui.js\";\r\nimport { initTurnstile, extractUtmParams } from \"./form-scripts/integrations.js\";\r\n\r\n// Initialize everything when DOM is loaded\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  // Initialize UI components\r\n  initUI();\r\n\r\n  // Initialize Turnstile integration\r\n  initTurnstile();\r\n\r\n  // Extract UTM parameters from URL\r\n  extractUtmParams();\r\n\r\n  // Initialize form\r\n  initForm();\r\n\r\n  console.log(\"Form application initialized\");\r\n});\r\n"],
  "mappings": "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",
  "names": ["initUI", "createModal", "modalHtml", "styleSheet", "modalDiv", "showModal", "title", "message", "modal", "modalTitle", "modalMessage", "closeModal", "ZipCodeValidator", "code", "baseZip", "response", "data", "result", "formattedCode", "fsa", "validateZipCode", "zipCodeField", "validationResult", "showModal", "validateAllFields", "form", "initForm", "form", "handleFormSubmit", "e", "validateForm", "validateAllFields", "initTurnstile", "form", "submitButton", "turnstileHTML", "loadTurnstileScript", "script", "extractUtmParams", "urlParams", "key", "value", "existingInput", "input", "initUI", "initTurnstile", "extractUtmParams", "initForm"]
}
